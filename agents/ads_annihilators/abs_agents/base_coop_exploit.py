from agents.ads_annihilators.abs_agents.agent_ema import EMAAgent


class BaseCoopExploit(EMAAgent):
    def __init__(self,
                 *args,
                 exploit_percent=0.9,
                 exploit_threshold=10,
                 base_normalization=0.23,
                 baseline_ema=0.75,
                 play_nice_threshold=0.9,
                 **kwargs):
        super().__init__(*args, **kwargs)
        self.exploit_percent = exploit_percent
        self.exploit_threshold = exploit_threshold
        self.base_normalization = base_normalization
        self.baseline_ema = baseline_ema
        self.play_nice_threshold = play_nice_threshold

    def exploit(self, i):  # Try our best to win this round
        self.alphas[i] = min(self.pred_op_alphas[i], self.op_alpha_emas[i]) * 0.9

    def play_nice(self, i):    # Do their last alpha
        self.alphas[i] = self.last_op_alphas[i]

    def baseline(self, i):     # Normalization plus weighted EMA
        self.alphas[i] = self.base_normalization + self.baseline_ema * self.op_alpha_emas[i]

    def update_decision(self):
        super().update_decision()
        for i in range(self.n_items):
            if self.item_prices[i] > self.exploit_threshold:
                self.exploit(i)
            elif self.op_last_prices[i] >= self.last_cust_values[i] * self.play_nice_threshold:
                self.play_nice(i)
            else:
                self.baseline(i)
